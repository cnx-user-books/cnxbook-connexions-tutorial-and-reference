<document xmlns="http://cnx.rice.edu/cnxml" xmlns:m="http://www.w3.org/1998/Math/MathML" xmlns:md="http://cnx.rice.edu/mdml">
  <title>Content MathML</title>

  <metadata><md:content-id>undefined</md:content-id><md:title/><md:uuid>2bae0fb8-e5ea-48bd-b893-503033db6cfd</md:uuid>
</metadata>

  <content>
    <para id="parintro">
      The authoritative reference for Content MathML is <link url="http://www.w3.org/TR/MathML2/chapter4.html">Section 4
	of the MathML 2.0 Specification</link>.  The World Wide Web
	Consortium (W3C) is the body that wrote the specification for
	MathML.  The text is very readable and it is easy to find what
	you are looking for.  Look there for answers to questions that
	are not answered in this tutorial or when you need more
	elaboration.  This tutorial is based on MathML 2.0.
    </para>
    <para id="parintro2">
      In this document, the <code>m</code> prefix is used to
      denote tags in the MathML namespace.  Thus the
      <code>&lt;apply&gt;</code> tag is referred to as
      <code>&lt;m:apply&gt;</code>.  Remember all markup in
      the MathML namespace must be surrounded by
      <code>&lt;m:math&gt;</code> tags.
    </para>
    <section id="secapply">
      <title>
	The Fundamentals of Content MathML: Applying Functions and
	Operators
      </title>
      <para id="parapply">
	The fundamental concept to grasp about Content MathML is that
	it consists of applying a series of functions and operators to
	other elements.  To do this, Content MathML uses prefix
	notation.  <term>Prefix notation</term> is when the operator
	comes first and is followed by the operands.  Here is how to
	write "2 plus 3".
	<code display="block" id="idm260560">
	&lt;m:math&gt;
          &lt;m:apply&gt;
	    &lt;m:plus/&gt;
	    &lt;m:cn&gt;2&lt;/m:cn&gt;
            &lt;m:cn&gt;3&lt;/m:cn&gt;
	  &lt;/m:apply&gt;
	&lt;/m:math&gt;
	</code>
	This would display as 
	<m:math>
          <m:apply>
	    <m:plus/>
	    <m:cn>2</m:cn>
            <m:cn>3</m:cn>
	  </m:apply>
	</m:math>.
      </para>
      <para id="parapply2">
	There are three types of elements in the Content MathML
	example shown above.  First, there is the <code>apply</code>
	tag, which indicates that an operator (or function) is about
	to be applied to the operands.  Second, there is the function
	or operator to be applied.  In this case the operator,
	<code>plus</code>, is being applied.  Third, the operands
	follow the operator.  In this case the operands are the
	numbers being added.  In summary, the apply tag applies the
	function (which could be sin or
	<m:math><m:ci>f</m:ci></m:math>, etc.) or operator (which
	could be plus or minus, etc.)  to the elements that follow it.
      </para>
      <section id="sectoken">
	<title>Tokens</title>
	<para id="parcicn">
	  Content MathML has three tokens: <code>ci</code>,
	  <code>cn</code>, and <code>csymbol</code>.  A
	  <term>token</term> is basically the lowest level element.
	  The tokens denote what kind of element you are acting on.
	  The <term>cn</term> tag indicates that the content of the
	  tag is a number.  The <term>ci</term> tag indicates that the
	  content of the tag is an identifier.  An
	  <term>identifier</term> could be any variable or function;
	  <m:math><m:ci>x</m:ci></m:math>,
	  <m:math><m:ci>y</m:ci></m:math>, and
	  <m:math><m:ci>f</m:ci></m:math> are examples of identifiers.
	  In addition, <code>ci</code> elements can contain
	  Presentation MathML.  Tokens, especially <code>ci</code> and
	  <code>cn</code>, are used profusely in Content MathML.
	  Every number, variable, or function is marked by a token.
	</para>
	<para id="parcsym">
	  <term>csymbol</term> is a different type of token from
	  <code>ci</code> and <code>cn</code>.  It is used to create a
	  new object whose semantics is defined externally.  It can
	  contain plain text or Presentation MathML.  If you find that
	  you need something, such as an operator or function, that is
	  not defined in Content MathML, then you can use csymbol to
	  create it.
	</para>
	<para id="parpres">
	  Both <code>ci</code> and <code>csymbol</code> can use
	  Presentation MathML to determine how an identifier or a new
	  symbol will be rendered.  To learn more about Presentation
	  MathML see <link url="http://www.w3.org/TR/MathML2/chapter3.html">Section 3
	  of the MathML 2.0 Specification</link>.  For example, to
	  denote "<m:math><m:ci>x</m:ci></m:math> with a subscript 2",
	  where the 2 does not have a more semantic meaning, you would
	  use the following code.
	  <code display="block" id="idm8390416">
	  &lt;m:math&gt;
	    &lt;m:ci&gt;
	      &lt;m:msub&gt;
	        &lt;m:mi&gt;x&lt;/m:mi&gt;
	        &lt;m:mn&gt;2&lt;/m:mn&gt;
	      &lt;/m:msub&gt;
	    &lt;/m:ci&gt;
	  &lt;/m:math&gt;
	  </code>
	  This would display as 
	  <m:math>
	    <m:ci>
	      <m:msub>
	        <m:mi>x</m:mi>
	        <m:mn>2</m:mn>
	      </m:msub>
	    </m:ci>
	  </m:math>.
	</para>
	<para id="partype">
	  The <code>ci</code> elements have a type attribute which
	  can be used to provide more information about the content of
	  the element.  For example, you can declare the contents of a
	  <code>ci</code> tag to be a function
	  (<code>type='fn'</code>), or a vector
	  (<code>type='vector'</code>), or a complex number
	  (<code>type='complex'</code>), as well as any number of
	  other things.  Using the type attribute helps encode the
	  meaning of the math that you are writing.
	</para>
      </section>
      <section id="secfunc">
	<title>Functions and Operators</title>
	<para id="parfcn">
	  In order to apply a function to a variable, make the
	  function the first argument of an apply.  The second
	  argument will be the variable.  For example, you would use
	  the following code to encode the meaning, "the function
	  <m:math><m:ci>f</m:ci></m:math> of
	  <m:math><m:ci>x</m:ci></m:math>".  (Note that you have to
	  include the attribute <code>type='fn'</code> on the
	  <code>ci</code> tag denoting
	  <m:math><m:ci>f</m:ci></m:math>.)
	  <code display="block" id="idp173392">
	  &lt;m:math&gt;
	    &lt;m:apply&gt;
	      &lt;m:ci type='fn'&gt;f&lt;/m:ci&gt;
	      &lt;m:ci&gt;x&lt;/m:ci&gt;
	    &lt;/m:apply&gt;
	  &lt;/m:math&gt;
	  </code>
	  This will display as 
	  <m:math>
	    <m:apply>
	      <m:ci type="fn">f</m:ci>
	      <m:ci>x</m:ci>
	    </m:apply>
	  </m:math>.
	</para>
	<para id="parsin">
	  There are also pre-defined functions and operators in
	  Content MathML.  For example, sine and cosine are
	  predefined.  These predefined functions and operators are
	  all <term>empty tags</term> and they directly follow the
	  apply tag.  "The sine of <m:math><m:ci>x</m:ci></m:math>" is
	  similar to the example above.
	  <code display="block" id="idp1179472">
	  &lt;m:math&gt;
	    &lt;m:apply&gt;
	      &lt;m:sin/&gt;
	      &lt;m:ci&gt;x&lt;/m:ci&gt;
	    &lt;/m:apply&gt;
	  &lt;/m:math&gt;
	  </code>
	  This will display as 
	  <m:math>
	    <m:apply>
	      <m:sin/>
	      <m:ci>x</m:ci>
	    </m:apply>
	  </m:math>.
	</para>
	<para id="parsin2">
	  You can find a more thorough description of the different
	  predefined functions in Chapter 4 of the MathML specification.
	</para>
	<para id="paroper">
	  In addition to the predefined functions, there are also many
	  predefined operators.  A few of these are <code>plus</code>
	  (for addition), <code>minus</code> (for subtraction),
	  <code>times</code> (for multiplication), <code>divide</code>
	  (for division), <code>power</code> (for taking the
	  <m:math><m:ci>n</m:ci></m:math>th-power of something), and
	  root (for taking the <m:math><m:ci>n</m:ci></m:math>th-root
	  of something).
	</para>
	<para id="parchild">
	  Most operators expect a specific number of child tags. For
	  example, the power operator expects two children.  The first
	  child is the base and the second is the value in the
	  exponent.  However, there are other tags which can take many
	  children.  For example, the plus operator merely expects one
	  or more children.  It will add together all of its children
	  whether there are two or five.  This is referred to as an
	  <term>n-ary operator</term>.
	</para>
	<para id="parpm">
	  Representing "the negative of a variable" and explicitly
	  representing "the positive of a variable or number" has
	  slightly unusual syntax.  In this case you apply the plus or
	  minus operator to the variable or number, etc., in question.
	  The following is the code for "negative
	  <m:math><m:ci>x</m:ci></m:math>."
	  <code display="block" id="idm8498384">
	  &lt;m:math&gt;
	    &lt;m:apply&gt;
	      &lt;m:minus/&gt;
	      &lt;m:ci&gt;x&lt;/m:ci&gt;
	    &lt;/m:apply&gt;
	  &lt;/m:math&gt;
	  </code>
	  This will display as 
	  <m:math>
	    <m:apply>
	      <m:minus/>
	      <m:ci>x</m:ci>
	    </m:apply>
	  </m:math>.
	</para>
	<para id="parnegnum">
	  In contrast to representing the negative of a variable, the
	  negative of a number may be coded as follows:
	  <code display="block" id="idm8005744">
	  &lt;m:math&gt;&lt;m:cn&gt;-1&lt;/m:cn&gt;&lt;/m:math&gt;
	  </code>
	  This will display as <m:math><m:cn>-1</m:cn></m:math>.
	</para>
	<para id="complexmath">
	  To create more complicated expressions, you can nest these
	  bits of apply code within each other.  You can create
	  arbitrarily complex expressions this way.
	  "<m:math><m:ci>a</m:ci></m:math> times the quantity
	  <m:math><m:ci>b</m:ci></m:math> plus
	  <m:math><m:ci>c</m:ci></m:math>" would be written as
	  follows.
	  <code display="block" id="idm7969184">
	  &lt;m:math&gt;
	    &lt;m:apply&gt;
	      &lt;m:times/&gt;
	      &lt;m:ci&gt;a&lt;/m:ci&gt;
	      &lt;m:apply&gt;
	        &lt;m:plus/&gt;
	        &lt;m:ci&gt;b&lt;/m:ci&gt;
	        &lt;m:ci&gt;c&lt;/m:ci&gt;
	      &lt;/m:apply&gt;
	    &lt;/m:apply&gt;
	  &lt;/m:math&gt;
	  </code>
	  This will display as 
	  <m:math>
	    <m:apply>
	      <m:times/>
	      <m:ci>a</m:ci>
	      <m:apply>
	        <m:plus/>
	        <m:ci>b</m:ci>
	        <m:ci>c</m:ci>
	      </m:apply>
	    </m:apply>
	  </m:math>.
	</para>
	<para id="pareq">
	  The <code>eq</code> operator is used to write equations.  It
	  is used in the same way as any other operator.  That is, it
	  is the first child of an apply.  It takes two (or more)
	  children which are the two quantities that are equal to each
	  other.  For example, "<m:math><m:ci>a</m:ci></m:math> times
	  <m:math><m:ci>b</m:ci></m:math> plus
	  <m:math><m:ci>a</m:ci></m:math> times
	  <m:math><m:ci>c</m:ci></m:math> equals
	  <m:math><m:ci>a</m:ci></m:math> times the quantity
	  <m:math><m:ci>b</m:ci></m:math> plus
	  <m:math><m:ci>c</m:ci></m:math>" would be written as shown.
	  <code display="block" id="idm7850288">
	  &lt;m:math&gt;
	    &lt;m:apply&gt;
	      &lt;m:eq/&gt;
	      &lt;m:apply&gt;
	        &lt;m:plus/&gt;
	        &lt;m:apply&gt;
		  &lt;m:times/&gt;
		  &lt;m:ci&gt;a&lt;/m:ci&gt;
		  &lt;m:ci&gt;b&lt;/m:ci&gt;
	        &lt;/m:apply&gt;
	        &lt;m:apply&gt;
		  &lt;m:times/&gt;
		  &lt;m:ci&gt;a&lt;/m:ci&gt;
		  &lt;m:ci&gt;c&lt;/m:ci&gt;
	        &lt;/m:apply&gt;
	      &lt;/m:apply&gt;
	      &lt;m:apply&gt;
	        &lt;m:times/&gt;
	        &lt;m:ci&gt;a&lt;/m:ci&gt;
	        &lt;m:apply&gt;
		  &lt;m:plus/&gt;
		  &lt;m:ci&gt;b&lt;/m:ci&gt;
		  &lt;m:ci&gt;c&lt;/m:ci&gt;
	        &lt;/m:apply&gt;
	      &lt;/m:apply&gt;
	    &lt;/m:apply&gt;
	  &lt;/m:math&gt;
	  </code>
	  This will display as 
	  <m:math>
	    <m:apply>
	      <m:eq/>
	      <m:apply>
	        <m:plus/>
	        <m:apply>
		  <m:times/>
		  <m:ci>a</m:ci>
		  <m:ci>b</m:ci>
	        </m:apply>
	        <m:apply>
		  <m:times/>
		  <m:ci>a</m:ci>
		  <m:ci>c</m:ci>
	        </m:apply>
	      </m:apply>
	      <m:apply>
	        <m:times/>
	        <m:ci>a</m:ci>
	        <m:apply>
		  <m:plus/>
		  <m:ci>b</m:ci>
		  <m:ci>c</m:ci>
	        </m:apply>
	      </m:apply>
	    </m:apply>
	  </m:math>.
	</para>
      </section>
    </section>
    <section id="secint">
      <title>Integrals</title>
      <para id="parint">
	The operator for an integral is <code>int</code>.  However,
	unlike the operators and functions discussed above, it has
	children that define the independent variable that you
	integrate with respect to (<code>bvar</code>) and the interval
	over which the integral is taken (use either
	<code>lowlimit</code> and <code>uplimit</code>, or
	<code>interval</code>, or <code>condition</code>).
	<code>lowlimit</code> and <code>uplimit</code> (which go
	together), <code>interval</code>, and <code>condition</code>
	are just three different ways of denoting the integrands.
	Don't forget that the bvar, <code>lowlimit</code>,
	<code>uplimit</code>, <code>interval</code>, and
	<code>condition</code> children take token elements as well.
	The following is "the integral of
	<m:math><m:ci>f</m:ci></m:math> of
	<m:math><m:ci>x</m:ci></m:math> with respect to
	<m:math><m:ci>x</m:ci></m:math> from 0 to
	<m:math><m:ci>b</m:ci></m:math>."
	<code display="block" id="idp5911264">
	&lt;m:math&gt;
          &lt;m:apply&gt;
	    &lt;m:int/&gt;
	    &lt;m:bvar&gt;&lt;m:ci&gt;x&lt;/m:ci&gt;&lt;/m:bvar&gt;
	    &lt;m:lowlimit&gt;&lt;m:cn&gt;0&lt;/m:cn&gt;&lt;/m:lowlimit&gt;
	    &lt;m:uplimit&gt;&lt;m:ci&gt;b&lt;/m:ci&gt;&lt;/m:uplimit&gt;
	    &lt;m:apply&gt;
	      &lt;m:ci type='fn'&gt;f&lt;/m:ci&gt;
	      &lt;m:ci&gt;x&lt;/m:ci&gt;
	    &lt;/m:apply&gt;
	  &lt;/m:apply&gt;
	&lt;/m:math&gt;
	</code>
	This will display as 
	<m:math>
          <m:apply>
	    <m:int/>
	    <m:bvar><m:ci>x</m:ci></m:bvar>
	    <m:lowlimit><m:cn>0</m:cn></m:lowlimit>
	    <m:uplimit><m:ci>b</m:ci></m:uplimit>
	    <m:apply>
	      <m:ci type="fn">f</m:ci>
	      <m:ci>x</m:ci>
	    </m:apply>
	  </m:apply>
	</m:math>.
      </para>
    </section>
    <section id="secder">
      <title>Derivatives</title> 
      <para id="pardiff2">
	The derivative operator is <code>diff</code>.  The derivative
	is done in much the same way as the integral.  That is, you
	need to define a base variable (using <code>bvar</code>).  The
	following is "the derivative of the function
	<m:math><m:ci>f</m:ci></m:math> of
	<m:math><m:ci>x</m:ci></m:math>, with respect to
	<m:math><m:ci>x</m:ci></m:math>."
	<code display="block" id="idp137392">
	&lt;m:math&gt;
          &lt;m:apply&gt;
	    &lt;m:diff/&gt;
	    &lt;m:bvar&gt;
	      &lt;m:ci&gt;x&lt;/m:ci&gt;
	    &lt;/m:bvar&gt;
	    &lt;m:apply&gt;
	      &lt;m:ci type="fn"&gt;f&lt;/m:ci&gt;
	      &lt;m:ci&gt;x&lt;/m:ci&gt;
	    &lt;/m:apply&gt;
	  &lt;/m:apply&gt;
	&lt;/m:math&gt;
	</code>
	This will display as 
	<m:math>
          <m:apply>
	    <m:diff/>
	    <m:bvar>
	      <m:ci>x</m:ci>
	    </m:bvar>
	    <m:apply>
	      <m:ci type="fn">f</m:ci>
	      <m:ci>x</m:ci>
	    </m:apply>
	  </m:apply>
	</m:math>.
      </para>
      <para id="pardeg">
	To apply a higher level derivative to a function, add a
	<code>degree</code> tag inside of the <code>bvar</code> tag.
	The degree tag will contain the order of the derivative.  The
	following shows "the second derivative of the function
	<m:math><m:ci>f</m:ci></m:math> of
	<m:math><m:ci>x</m:ci></m:math>, with respect to
	<m:math><m:ci>x</m:ci></m:math>."
	<code display="block" id="idp5887280">
	&lt;m:math&gt;
          &lt;m:apply&gt;
            &lt;m:diff/&gt;
	    &lt;m:bvar&gt;
	      &lt;m:ci&gt;x&lt;/m:ci&gt;
	      &lt;m:degree&gt;&lt;m:cn&gt;2&lt;/m:cn&gt;&lt;/m:degree&gt;
	    &lt;/m:bvar&gt;
	    &lt;m:apply&gt;&lt;m:ci type="fn"&gt;f&lt;/m:ci&gt;
	      &lt;m:ci&gt;x&lt;/m:ci&gt;
	    &lt;/m:apply&gt;
	  &lt;/m:apply&gt;
	&lt;/m:math&gt;
	</code>
	This will display as 
	<m:math>
          <m:apply>
            <m:diff/>
	    <m:bvar>
	      <m:ci>x</m:ci>
	      <m:degree><m:cn>2</m:cn></m:degree>
	    </m:bvar>
	    <m:apply><m:ci type="fn">f</m:ci>
	      <m:ci>x</m:ci>
	    </m:apply>
	  </m:apply>
	</m:math>.
      </para>
    </section>
    <section id="secvm">
      <title>Vector and Matrices</title>
      <para id="parv1">
	Vectors are created as a combination of other elements using
	the <code>vector</code> tag.
	<code display="block" id="idp355280">
	&lt;m:math&gt;
          &lt;m:vector&gt;
	    &lt;m:apply&gt;
	      &lt;m:plus/&gt;
	      &lt;m:ci&gt;x&lt;/m:ci&gt;
	      &lt;m:ci&gt;y&lt;/m:ci&gt;
	    &lt;/m:apply&gt;
	    &lt;m:ci&gt;z&lt;/m:ci&gt;
	    &lt;m:cn&gt;0&lt;/m:cn&gt;
	  &lt;/m:vector&gt;
	&lt;/m:math&gt;
	</code>
	This will display as 
	<m:math>
          <m:vector>
	    <m:apply>
	      <m:plus/>
	      <m:ci>x</m:ci>
	      <m:ci>y</m:ci>
	    </m:apply>
	    <m:ci>z</m:ci>
	    <m:cn>0</m:cn>
	  </m:vector>
	</m:math>.
      </para>
      
      <para id="parm1">
	Matrices are done in a similar manner.  Each
	<code>matrix</code> element contains several
	<code>matrixrow</code> elements.  Then each
	<code>matrixrow</code> element contains several other
	elements.
	<code display="block" id="idp3715008">
	&lt;m:math&gt;
          &lt;m:matrix&gt;
	    &lt;m:matrixrow&gt;
	      &lt;m:ci&gt;a&lt;/m:ci&gt;
	      &lt;m:ci&gt;b&lt;/m:ci&gt;
	      &lt;m:ci&gt;c&lt;/m:ci&gt;
	    &lt;/m:matrixrow&gt;
	    &lt;m:matrixrow&gt;
	      &lt;m:ci&gt;d&lt;/m:ci&gt;
	      &lt;m:ci&gt;e&lt;/m:ci&gt;
	      &lt;m:ci&gt;f&lt;/m:ci&gt;
	    &lt;/m:matrixrow&gt;
	    &lt;m:matrixrow&gt;
	      &lt;m:ci&gt;g&lt;/m:ci&gt;
	      &lt;m:ci&gt;h&lt;/m:ci&gt;
	      &lt;m:ci&gt;j&lt;/m:ci&gt;
	    &lt;/m:matrixrow&gt;
	  &lt;/m:matrix&gt;
	&lt;/m:math&gt;
	</code>
	This will display as 
	<m:math>
          <m:matrix>
	    <m:matrixrow>
	      <m:ci>a</m:ci>
	      <m:ci>b</m:ci>
	      <m:ci>c</m:ci>
	    </m:matrixrow>
	    <m:matrixrow>
	      <m:ci>d</m:ci>
	      <m:ci>e</m:ci>
	      <m:ci>f</m:ci>
	    </m:matrixrow>
	    <m:matrixrow>
	      <m:ci>g</m:ci>
	      <m:ci>h</m:ci>
	      <m:ci>j</m:ci>
	    </m:matrixrow>
	  </m:matrix>
	</m:math>.
      </para>
      <para id="parmv1">
	There are also operators to take the determinant and the
	transpose of a matrix as well as to select elements from
	within the matrix.
      </para>
    </section>
    <section id="entities">
      <title>Entities</title>
      <note id="idp1261584">The use of MathML character entity references in Connexions content is <emphasis>deprecated</emphasis>.</note><para id="entp1">MathML defines its own entities for many special characters used in mathematical notation.  While the entity references have the advantage of being mnemonic with respect to the characters they stand for, they also entail some technical limitations, and so their use in Connexions content is deprecated.  Please use the UTF-8-encoded Unicode characters themselves where possible, or, failing that, the XML Unicode character references for the characters.  At some time in the future, the Connexions repository system will likely convert entity references and character references silently to the UTF-8-encoded Unicode characters they stand for.  See <link url="http://www.w3.org/TR/2003/REC-MathML2-20031021/chapter6.html#chars.unicodechars">6.2.1 Unicode Character Data</link> from the XML Specification for more information.  The MathML specification contains a <link url="http://www.w3.org/TR/MathML2/bycodes.html">list of character entities with their corresponding Unicode code points</link>.</para><para id="element-71">There are character picker utilities available to help you select and paste UTF-8 characters into applications like Connexions.  If you are running Microsoft Windows, the Windows accessory Character Map can help you.  The "Lucida Sans Unicode" font seems to have a good selection of mathematical operators and special characters.  Under Linux, the charmap utility and GNOME applet provide access to all Unicode characters.</para>
    </section>
    <section id="resources">
      <title>Other Resources</title>
      <para id="last">
	There is a lot more that can be done with Content MathML.
	Especially if you are planning on writing a lot of Content
	MathML, it is well worth your time to take a look at the <link url="http://www.w3.org/TR/MathML2/">MathML
	specification</link>.
      </para>
    </section>
  </content>
</document>